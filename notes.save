Faire en sorte qu'en version mobile le menu n'apparaisse pas,
seulement l'icone menu burger et "Tous les produits"
lors du clique, afficher le menu sur le coté gauche ?

Changer la barre de recherche si elle est en px, ou trouver
un moyen pour qu'elle soit responsive

Faire une anchor sur l'icone à propos qui descends au niveau du footer
de la section "à propos" ?

Vu que ma page inscription et connexion sont les memes sauf pour 

Ne pas laisser synchronize: true (app.ts), ça peut détruire les données. 
Utiliser des migrations (typeorm migration:create).

Modifier le cors pour autoriser que certaines choses et pas tout ?

                            ------------------------ IMPORTANT ----------------------

Voici une analyse et une justification pour structurer correctement ton code :

---

### **Problème actuel**
- Tu as des méthodes liées à l'authentification (`hashPassword`, `isPasswordCorrect`, `generateJwt`) dans `UsersService`.
- Ces méthodes sont utilisées dans `UsersController`, mais elles relèvent de la logique d'authentification, qui devrait être gérée par `AuthService` et `AuthController`.

---

### **Solution recommandée**
1. **Déplacer les méthodes liées à l'authentification dans `AuthService`** :
   - Les méthodes comme `hashPassword`, `isPasswordCorrect`, et `generateJwt` sont spécifiques à l'authentification.
   - Elles doivent être centralisées dans `AuthService`, car leur rôle est de gérer la logique d'authentification.

2. **Injecter `UsersService` dans `AuthService`** :
   - `AuthService` peut avoir besoin d'accéder aux données utilisateur (par exemple, pour vérifier l'email ou récupérer l'utilisateur).
   - Injecter `UsersService` dans `AuthService` permet de réutiliser les méthodes liées aux utilisateurs sans dupliquer la logique.

3. **Faire appel à `AuthService` dans `AuthController`** :
   - `AuthController` doit gérer les routes liées à l'authentification (comme `/login` ou `/register`).
   - Il doit utiliser `AuthService` pour exécuter la logique métier.

---

### **Justification**
1. **Séparation des responsabilités** :
   - `UsersService` doit gérer les opérations CRUD sur les utilisateurs (création, mise à jour, suppression, etc.).
   - `AuthService` doit gérer la logique d'authentification (hashage, vérification des mots de passe, génération de JWT).

2. **Réutilisabilité** :
   - En injectant `UsersService` dans `AuthService`, tu évites de dupliquer la logique liée aux utilisateurs (comme la recherche par email).

3. **Clarté et maintenabilité** :
   - En centralisant la logique d'authentification dans `AuthService`, ton code devient plus lisible et facile à maintenir.
   - Les développeurs savent où chercher la logique d'authentification.

---

### **Implémentation**

#### **1. Déplacer les méthodes dans `AuthService`**
Modifie `AuthService` pour inclure les méthodes liées à l'authentification :

```typescript
import { Injectable } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService, // Inject UsersService
    private readonly jwtService: JwtService, // Inject JwtService
  ) {}

  async hashPassword(password: string): Promise<string> {
    const saltRounds = 10;
    return bcrypt.hash(password, saltRounds);
  }

  async isPasswordCorrect(email: string, password: string): Promise<boolean> {
    const user = await this.usersService.findByEmail(email); // Utilise UsersService
    if (!user) return false;
    return bcrypt.compare(password, user.password);
  }

  async generateJwt(email: string, userId: number): Promise<string> {
    const payload = { email, sub: userId };
    return this.jwtService.sign(payload);
  }
}
```

---

#### **2. Utiliser `AuthService` dans `AuthController`**
Modifie `AuthController` pour gérer les routes liées à l'authentification :

```typescript
import { Controller, Post, Body } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  async login(@Body() loginDto: LoginDto): Promise<{ token: string }> {
    const isValid = await this.authService.isPasswordCorrect(
      loginDto.email,
      loginDto.password,
    );

    if (!isValid) {
      throw new UnauthorizedException('Invalid credentials');
    }

    const user = await this.authService.usersService.findByEmail(loginDto.email);
    const token = await this.authService.generateJwt(user.email, user.id);
    return { token };
  }
}
```

---

#### **3. Nettoyer `UsersService`**
Supprime les méthodes liées à l'authentification de `UsersService`, car elles sont maintenant dans `AuthService`.

---

### **Résumé**
- **Déplace** les méthodes liées à l'authentification dans `AuthService`.
- **Injecte** `UsersService` dans `AuthService` pour accéder aux données utilisateur.
- **Utilise** `AuthService` dans `AuthController` pour gérer les routes `/login` et autres liées à l'authentification.

Cette structure respecte les principes de séparation des responsabilités et rend ton code plus clair et maintenable.