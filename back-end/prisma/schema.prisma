// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  BASKET
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phoneNumber String

  city String
  street String
  zipCode String
  country String
  
  conditions Boolean
  newsletter Boolean?
  createdAt DateTime @default(now())
  role      UserRole @default(CUSTOMER)

  orders Order[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  products    Product[]
}

model Order {
  
  id          Int         @id @default(autoincrement())
  userId      Int
  status      OrderStatus @default(PENDING)
  total       Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[] 

  @@index([userId]) // Index for faster lookups by user
}                              

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Ensure a product can only appear once in an order

  // Il faudra peut être faire un algo pour si le produit est déjà dans la commande, on incrémente la quantité
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  imageUrl    String
  stock       Int

  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  orderItems OrderItem[]
}
